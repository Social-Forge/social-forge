# version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    build:
      context: .
      dockerfile: docker/postgres/Dockerfile.postgres
    container_name: socialforge-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-socialforge}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-socialforge123}
      POSTGRES_DB: ${DB_NAME:-socialforge_db}
      PGDATA: /var/lib/postgresql/data/pgdata
      LANG: en_US.utf8
      LC_ALL: en_US.utf8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/scripts:/docker-entrypoint-initdb.d:ro
    ports:
      # - "127.0.0.1:${DB_PORT:-5432}:5432"
      - "${DB_PORT:-5432}:5432"
    networks:
      - socialforge-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${DB_USER:-socialforge} -d ${DB_NAME:-socialforge_db}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres 
      -c config_file=/etc/postgresql/postgresql.conf 
      -c hba_file=/etc/postgresql/pg_hba.conf

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: socialforge-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123} --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - socialforge-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Centrifugo WebSocket Server
  centrifugo:
    image: centrifugo/centrifugo:v5
    container_name: socialforge-centrifugo
    restart: unless-stopped
    command: centrifugo --config=/centrifugo/config.json
    volumes:
      - ./docker/centrifugo/config.json:/centrifugo/config.json
    ports:
      - "${CENTRIFUGO_PORT:-8000}:8000"
    networks:
      - socialforge-network
    environment:
      CENTRIFUGO_TOKEN_HMAC_SECRET_KEY: ${CENTRIFUGO_TOKEN_SECRET:-your-secret-token-key}
      CENTRIFUGO_API_KEY: ${CENTRIFUGO_API_KEY:-your-api-key}
      CENTRIFUGO_ADMIN_PASSWORD: ${CENTRIFUGO_ADMIN_PASSWORD:-admin123}
      CENTRIFUGO_ADMIN_SECRET: ${CENTRIFUGO_ADMIN_SECRET:-admin-secret}
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: socialforge-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    volumes:
      - minio_data:/data
    ports:
      - "${MINIO_PORT:-9000}:9000" # Localhost only!
      - "${MINIO_CONSOLE_PORT:-9001}:9001" # Localhost only!
    networks:
      - socialforge-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: socialforge-prometheus-prod
    restart: always
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=30d"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - socialforge-network
    depends_on:
      - backend
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
        reservations:
          cpus: "0.5"
          memory: 512M

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: socialforge-grafana-prod
    restart: always
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_SERVER_ROOT_URL: ${GRAFANA_ROOT_URL}
      GF_INSTALL_PLUGINS: ${GRAFANA_PLUGINS:-}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - socialforge-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M

  # Golang Backend API (Production)
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
      target: production
    restart: always
    environment:
      APP_ENV: production
      APP_PORT: 8080
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      CENTRIFUGO_URL: http://centrifugo:8000
      CENTRIFUGO_API_KEY: ${CENTRIFUGO_API_KEY}
      CENTRIFUGO_TOKEN_SECRET: ${CENTRIFUGO_TOKEN_SECRET}
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
    networks:
      - socialforge-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      centrifugo:
        condition: service_healthy
      minio:
        condition: service_healthy
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: "2"
          memory: 2G
        reservations:
          cpus: "1"
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Asynq Worker (Background Jobs)
  worker:
    build:
      context: ./server
      dockerfile: Dockerfile
      target: production
    restart: always
    environment:
      APP_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      CENTRIFUGO_URL: http://centrifugo:8000
      CENTRIFUGO_API_KEY: ${CENTRIFUGO_API_KEY}
    networks:
      - socialforge-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: /app/worker
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: "2"
          memory: 1G
        reservations:
          cpus: "1"
          memory: 512M

  # SvelteKit Client (Production)
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: production
      args:
        PUBLIC_API_URL: ${PUBLIC_API_URL}
        PUBLIC_CENTRIFUGO_URL: ${PUBLIC_CENTRIFUGO_URL}
        CLIENT_ORIGIN: ${CLIENT_ORIGIN}
        CLIENT_SECRET: ${CLIENT_SECRET}
    restart: always
    environment:
      PUBLIC_API_URL: ${PUBLIC_API_URL}
      PUBLIC_CENTRIFUGO_URL: ${PUBLIC_CENTRIFUGO_URL}
      CLIENT_ORIGIN: ${CLIENT_ORIGIN}
      CLIENT_SECRET: ${CLIENT_SECRET}
    networks:
      - socialforge-network
    depends_on:
      - backend
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: "1"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M

  # Nginx Reverse Proxy (Optional for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: socialforge-nginx
    restart: unless-stopped
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - certbot_certs:/etc/nginx/ssl:ro
      - certbot_www:/var/www/certbot:ro
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    networks:
      - socialforge-network
    depends_on:
      - centrifugo
      - minio
      - postgres
      - redis
      - backend
      - client

  certbot:
    image: certbot/certbot
    container_name: socialforge-certbot
    restart: unless-stopped
    volumes:
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $!; done;'"

  certbot-init:
    image: certbot/certbot
    container_name: socialforge-certbot-init
    volumes:
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    command: >
      certonly --webroot -w /var/www/certbot --email support@socialforge.io --agree-tos --no-eff-email 
      -d socialforge.io
      -d api.socialforge.io 
      -d app.socialforge.io 
      -d storage.socialforge.io 
      -d monitoring.socialforge.io
      -d admin.socialforge.io
    profiles:
      - init-certs

networks:
  socialforge-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  minio_data:
  prometheus_data:
  grafana_data:
  go_modules:
  node_modules:
  certbot_certs:
  certbot_www:
