name: Frontend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
    - 'frontend/**'
    - '.github/workflows/frontend-deploy.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
    - 'frontend/**'

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/frontend

jobs:
  # Test & Build Job
  test:
    name: Test & Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run linter
      working-directory: ./frontend
      run: npm run lint

    - name: Run type check
      working-directory: ./frontend
      run: npm run check

    - name: Run tests
      working-directory: ./frontend
      run: npm run test:unit
      continue-on-error: true

    - name: Build application
      working-directory: ./frontend
      env:
        PUBLIC_API_URL: https://api.socialforge.com
        PUBLIC_CENTRIFUGO_URL: wss://api.socialforge.com/centrifugo
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/
        retention-days: 7

  # Lighthouse CI Job
  lighthouse:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    needs: [ test ]
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Build application
      working-directory: ./frontend
      run: npm run build

    - name: Run Lighthouse CI
      working-directory: ./frontend
      run: |
        npm install -g @lhci/cli
        lhci autorun
      continue-on-error: true

  # Docker Build & Push Job
  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [ test ]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        target: production
        build-args: |
          PUBLIC_API_URL=${{ github.ref == 'refs/heads/main' && 'https://api.socialforge.com' || 'https://staging-api.socialforge.com' }}
          PUBLIC_CENTRIFUGO_URL=${{ github.ref == 'refs/heads/main' && 'wss://api.socialforge.com/centrifugo' || 'wss://staging-api.socialforge.com/centrifugo' }}

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [ docker ]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://app.socialforge.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to server
      env:
        HOST: ${{ secrets.PRODUCTION_HOST }}
        USER: ${{ secrets.PRODUCTION_USER }}
      run: |
        ssh $USER@$HOST << 'EOF'
          cd /var/www/socialforge
          docker-compose -f docker-compose.prod.yml pull frontend
          docker-compose -f docker-compose.prod.yml up -d frontend
          docker image prune -f
        EOF

    - name: Health Check
      run: |
        sleep 10
        curl -f https://app.socialforge.com || exit 1

    - name: Purge CDN Cache
      if: success()
      run: |
        # Add your CDN cache purge command here
        # Example for Cloudflare:
        # curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
        #   -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
        #   -H "Content-Type: application/json" \
        #   --data '{"purge_everything":true}'
        echo "CDN cache purged"

    - name: Notify Slack on Success
      if: success()
      uses: slackapi/slack-github-action@v1
      with:
        webhook: ${{ secrets.SLACK_WEBHOOK }}
        payload: |
          {
            "text": "✅ Frontend deployed successfully to production!",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Frontend Deployment Successful*\n*Branch:* ${{ github.ref_name }}\n*Commit:* ${{ github.sha }}\n*Author:* ${{ github.actor }}\n*URL:* https://app.socialforge.com"
                }
              }
            ]
          }

    - name: Notify Slack on Failure
      if: failure()
      uses: slackapi/slack-github-action@v1
      with:
        webhook: ${{ secrets.SLACK_WEBHOOK }}
        payload: |
          {
            "text": "❌ Frontend deployment to production failed!",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Frontend Deployment Failed*\n*Branch:* ${{ github.ref_name }}\n*Commit:* ${{ github.sha }}\n*Author:* ${{ github.actor }}"
                }
              }
            ]
          }

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [ docker ]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging-app.socialforge.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}

    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.STAGING_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to staging server
      env:
        HOST: ${{ secrets.STAGING_HOST }}
        USER: ${{ secrets.STAGING_USER }}
      run: |
        ssh $USER@$HOST << 'EOF'
          cd /var/www/socialforge-staging
          docker-compose -f docker-compose.prod.yml pull frontend
          docker-compose -f docker-compose.prod.yml up -d frontend
          docker image prune -f
        EOF

    - name: Health Check
      run: |
        sleep 10
        curl -f https://staging-app.socialforge.com || exit 1

    - name: Comment PR with deployment URL
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '🚀 Deployed to staging: https://staging-app.socialforge.com'
          })
